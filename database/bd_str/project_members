create table public.project_members (
  id uuid not null default gen_random_uuid (),
  project_id uuid not null,
  user_id uuid not null,
  role character varying(20) not null,
  invited_by uuid null,
  joined_at timestamp with time zone null default now(),
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint project_members_pkey primary key (id),
  constraint project_members_project_id_user_id_key unique (project_id, user_id),
  constraint project_members_invited_by_fkey foreign KEY (invited_by) references users (id),
  constraint project_members_project_id_fkey foreign KEY (project_id) references projects (id) on delete CASCADE,
  constraint project_members_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE,
  constraint project_members_role_check check (
    (
      (role)::text = any (
        (
          array[
            'creator'::character varying,
            'admin'::character varying,
            'member'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_project_members_project on public.project_members using btree (project_id) TABLESPACE pg_default;

create index IF not exists idx_project_members_user on public.project_members using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_project_members_role on public.project_members using btree (role) TABLESPACE pg_default;

create trigger update_project_members_updated_at BEFORE
update on project_members for EACH row
execute FUNCTION update_updated_at_column ();