# Задача для Claude Code: Создание новых Supabase репозиториев

## Контекст
Flutter приложение Rehearsal App использует Supabase как backend. Недавно была полностью пересоздана схема БД и настроена интеграция с Supabase Auth. Нужно создать новые репозитории под новую схему.

## Схема БД
База данных содержит 6 основных таблиц:

1. **users** - пользователи (интегрированы с auth.users через триггер)
   - id (UUID, PK) = auth.users.id 
   - full_name, email, phone, avatar_url
   - timezone, language, theme, notification_settings (JSONB)
   - is_active, last_login, created_at, updated_at, deleted_at

2. **projects** - театральные проекты  
   - id (UUID, PK), name, description, creator_id (FK)
   - invite_code (unique), start_date, end_date, timezone
   - is_active, created_at, updated_at, deleted_at

3. **project_members** - участники проектов
   - id (UUID, PK), project_id (FK), user_id (FK) 
   - role (creator/admin/member), invited_by (FK), joined_at
   - created_at, updated_at

4. **rehearsals** - репетиции
   - id (UUID, PK), project_id (FK), created_by (FK)
   - start_datetime, end_datetime (TIMESTAMPTZ, всегда UTC)
   - location, scene_details, status (scheduled/updated/cancelled)
   - created_at, updated_at, deleted_at

5. **rehearsal_participants** - участники репетиций
   - id (UUID, PK), rehearsal_id (FK), user_id (FK)
   - rsvp_status (attending/declined/maybe/pending), response_at, notes
   - created_at, updated_at

6. **user_availability** - доступность пользователей
   - id (UUID, PK), user_id (FK), date (DATE)
   - status (free/busy/partial), time_slots (JSONB), notes  
   - created_at, updated_at

## Задачи

### ЗАДАЧА 1: Создать BaseRepository
**Файл:** `lib/data/repositories/base_repository.dart`

Создать универсальный базовый класс для всех репозиториев со следующими возможностями:
- Извлечение timestamps (created_at, updated_at, deleted_at) из Supabase ответов
- Универсальный soft delete для любой таблицы  
- Безопасное выполнение операций с обработкой ошибок
- Логирование для debug режима
- Помощники для конвертации дат и валидации

### ЗАДАЧА 2: Создать SupabaseDataSource
**Файл:** `lib/data/datasources/supabase_datasource.dart`

Создать обертку над SupabaseConfig для:
- Централизованного доступа к Supabase client
- Методов-помощников для типовых операций (select, insert, update, delete)
- Единого места для настройки и логирования

### ЗАДАЧА 3: Создать UsersRepositoryImpl  
**Файл:** `lib/data/repositories/users_repository_impl.dart`

Реализовать интерфейс `UsersRepository` для работы с таблицей `users`:
- getById(String id) - получить профиль пользователя
- list() - получить всех пользователей (для админки)
- update() - обновить профиль пользователя
- softDelete() - мягкое удаление профиля

**ВАЖНО:** НЕ создавать метод create() - пользователи создаются автоматически через триггер при регистрации в auth.users.

### ЗАДАЧА 4: Обновить repository_providers.dart
**Файл:** `lib/core/providers/repository_providers.dart`

Обновить провайдеры для использования новых репозиториев:
- Заменить импорты старых Supabase репозиториев на новые
- Обновить инстанциирование репозиториев

### ЗАДАЧА 5: Обновить settings_provider.dart  
**Файл:** `lib/core/settings/settings_provider.dart`

Убрать зависимость от SupabaseProfilesRepository:
- Удалить импорт `supabase_profiles_repository.dart`
- Заменить специфичные вызовы на общие методы интерфейса
- Использовать notification_settings JSONB поле вместо хранения в bio

## Технические требования

### Обработка ошибок
- Использовать try-catch во всех методах
- Логировать ошибки в debug режиме
- Возвращать понятные исключения

### Timestamps  
- Все timestamps в БД в UTC
- Автоматически извлекать created_at, updated_at, deleted_at
- Конвертировать в millisecondsSinceEpoch для domain моделей

### Аутентификация
- Использовать auth.uid() для получения текущего пользователя
- Проверять права доступа где необходимо
- Работать с RLS policies БД

### Imports
Использовать следующие импорты:
```dart
import 'package:flutter/foundation.dart';
import 'package:rehearsal_app/core/supabase/supabase_config.dart';
import 'package:rehearsal_app/domain/repositories/users_repository.dart';
import 'package:rehearsal_app/domain/models/user.dart';
// и т.д.
```

## Критерии готовности

- [ ] BaseRepository создан с универсальными методами
- [ ] SupabaseDataSource создан как обертка
- [ ] UsersRepositoryImpl полностью реализован
- [ ] repository_providers.dart обновлен
- [ ] settings_provider.dart обновлен  
- [ ] Код компилируется без ошибок
- [ ] Все импорты корректные
- [ ] Следует паттернам существующего кода

## Приоритет
Высокий - блокирует дальнейшую разработку.

Начинать с BaseRepository, затем UsersRepository, затем обновление провайдеров.





# Исправления

# Задача для Claude Code: Критические исправления репозиториев

## Контекст
После анализа кода выявлены критические проблемы в реализации репозиториев, которые необходимо исправить для корректной работы приложения.

## КРИТИЧЕСКИЕ ПРОБЛЕМЫ

### ПРОБЛЕМА 1: Неполный маппинг User модели
**Файл:** `lib/data/repositories/users_repository_impl.dart`

**Текущая проблема:**
```dart
// ОТСУТСТВУЮТ поля email и phone в маппинге
User _mapToUser(Map<String, dynamic> json, {required String lastWriter}) {
  return User(
    name: json['full_name']?.toString(), // есть
    // email: ОТСУТСТВУЕТ!
    // phone: ОТСУТСТВУЕТ!
  );
}
```

**Требуется:**
- Добавить все поля из схемы БД в маппинг
- Убедиться что User модель соответствует таблице users

### ПРОБЛЕМА 2: Некорректный парсинг notification_settings
**Файл:** `lib/core/settings/settings_provider.dart`

**Текущая проблема:**
```dart
// Хрупкая логика парсинга строки
'notifications': profile.metadata!.contains('notifications:true'),
```

**Требуется:**
- notification_settings это JSONB поле в БД
- Нужно парсить как JSON, а не строку
- Исправить логику загрузки и сохранения настроек

### ПРОБЛЕМА 3: Архитектурная неконсистентность create() метода
**Файл:** `lib/domain/repositories/users_repository.dart`

**Текущая проблема:**
- Интерфейс содержит create() метод
- Реализация бросает UnsupportedError
- Создает путаницу для разработчиков

**Требуется:**
- Удалить create() из интерфейса UsersRepository
- Обновить все зависимые файлы

## ДЕТАЛЬНЫЕ ИСПРАВЛЕНИЯ

### ИСПРАВЛЕНИЕ 1: Обновить User маппинг

**Файл:** `lib/data/repositories/users_repository_impl.dart`

```dart
User _mapToUser(Map<String, dynamic> json, {required String lastWriter}) {
  final timestamps = extractTimestamps(json);

  return User(
    id: json['id'],
    createdAtUtc: timestamps['createdAtUtc']!,
    updatedAtUtc: timestamps['updatedAtUtc']!,
    deletedAtUtc: timestamps['deletedAtUtc'],
    lastWriter: lastWriter,
    name: json['full_name']?.toString() ?? 'Unknown User',
    avatarUrl: json['avatar_url']?.toString(),
    tz: json['timezone']?.toString() ?? 'UTC',
    metadata: json['notification_settings']?.toString() ?? '',
  );
}
```

**НО НУЖНО ДОБАВИТЬ** в User конструктор:
- email: json['email']?.toString() ?? ''
- phone: json['phone']?.toString()

### ИСПРАВЛЕНИЕ 2: Проверить и обновить domain/models/user.dart

**Файл:** `lib/domain/models/user.dart`

Убедиться что User модель содержит все поля:
- id, createdAtUtc, updatedAtUtc, deletedAtUtc, lastWriter
- name (full_name), email, phone, avatarUrl (avatar_url)
- tz (timezone), metadata (notification_settings как строка)

### ИСПРАВЛЕНИЕ 3: Удалить create() из интерфейса

**Файл:** `lib/domain/repositories/users_repository.dart`

```dart
abstract class UsersRepository {
  // УДАЛИТЬ этот метод полностью:
  // Future<User> create({...});
  
  Future<User?> getById(String id);
  Future<List<User>> list();
  Future<void> update({...});
  Future<void> softDelete(String id, {String lastWriter});
}
```

**Также обновить:** `lib/data/repositories/users_repository_impl.dart`
- Удалить реализацию create() метода
- Убрать UnsupportedError

### ИСПРАВЛЕНИЕ 4: Исправить settings_provider.dart

**Файл:** `lib/core/settings/settings_provider.dart`

**В методе _loadSettings():**
```dart
// ЗАМЕНИТЬ:
final settingsJson = profile.metadata != null
    ? {
        'notifications': profile.metadata!.contains('notifications:true'),
        // ... хрупкий парсинг
      }
    : <String, dynamic>{};

// НА:
final settingsJson = profile.metadata != null && profile.metadata!.isNotEmpty
    ? (jsonDecode(profile.metadata!) as Map<String, dynamic>)
    : <String, dynamic>{
        'notifications': true,
        'soundEnabled': true,
        'theme': 'system',
        'language': null,
      };
```

**Добавить импорт:**
```dart
import 'dart:convert' as dart;
```

### ИСПРАВЛЕНИЕ 5: Улучшить updateNotificationSettings

**Файл:** `lib/data/repositories/users_repository_impl.dart`

**Добавить метод:**
```dart
/// Update notification settings and return as JSON string for metadata
String _encodeNotificationSettings(Map<String, dynamic> settings) {
  return dart.jsonEncode(settings);
}

/// Update user notification settings specifically
Future<void> updateNotificationSettings({
  required String id,
  required Map<String, dynamic> settings,
  String lastWriter = 'device:local',
}) async {
  await safeExecute(
    () async {
      // Store settings as JSONB in notification_settings field
      await _dataSource.update(
        table: _tableName,
        id: id,
        data: {'notification_settings': settings},
      );
    },
    operationName: 'UPDATE_NOTIFICATION_SETTINGS',
    tableName: _tableName,
    recordId: id,
  );
}
```

## ПРОВЕРКИ ПОСЛЕ ИСПРАВЛЕНИЙ

### Тест 1: User маппинг
```dart
// Проверить что все поля маппятся:
final user = await usersRepo.getById('test-id');
assert(user?.name != null);
assert(user?.email != null); // Должно работать после исправления
assert(user?.tz != null);
```

### Тест 2: Settings сохранение/загрузка
```dart
// Проверить что настройки сохраняются как JSON:
await settingsNotifier.updateTheme(AppTheme.dark);
// В БД должно быть: {"theme": "dark", "notifications": true, ...}
```

### Тест 3: Компиляция
- Код должен компилироваться без ошибок
- Все импорты должны быть корректными
- Интерфейсы должны совпадать с реализациями

## КРИТЕРИИ ГОТОВНОСТИ

- [x] User модель содержит все поля из схемы БД
- [x] Маппинг _mapToUser() использует все доступные поля
- [x] create() метод удален из UsersRepository интерфейса
- [x] settings_provider.dart парсит JSON корректно
- [x] notification_settings сохраняются как валидный JSON
- [x] Код компилируется без ошибок
- [x] Все импорты корректные

## ПРИОРИТЕТ
КРИТИЧЕСКИЙ - блокирует корректную работу пользовательских профилей и настроек.

## ПОРЯДОК ВЫПОЛНЕНИЯ
1. Обновить domain/models/user.dart (добавить недостающие поля)
2. Исправить маппинг в users_repository_impl.dart
3. Удалить create() из интерфейса UsersRepository
4. Исправить settings_provider.dart (JSON парсинг)
5. Тестировать компиляцию и базовую функциональность