create table public.user_availability (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  date date not null,
  status character varying(20) not null,
  time_slots jsonb null,
  notes text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  deleted_at timestamp with time zone null,
  constraint user_availability_pkey primary key (id),
  constraint user_availability_user_id_date_key unique (user_id, date),
  constraint user_availability_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE,
  constraint user_availability_status_check check (
    (
      (status)::text = any (
        (
          array[
            'free'::character varying,
            'busy'::character varying,
            'partial'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_user_availability_user on public.user_availability using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_user_availability_date on public.user_availability using btree (date) TABLESPACE pg_default;

create index IF not exists idx_user_availability_user_date on public.user_availability using btree (user_id, date) TABLESPACE pg_default;

create trigger update_user_availability_updated_at BEFORE
update on user_availability for EACH row
execute FUNCTION update_updated_at_column ();